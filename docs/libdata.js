/* Index used for searching */
/*
   Fields used:
     url, name, type, filename, authors, routine name, comments, parameters,
     categories, and attributes
*/
title = "Documentation for /Users/aram/git/APlib/core/";
subtitle = "Generated by IDLdoc";
libdata = new Array();
libdataItem = 0;



libdata[libdataItem++] = new Array("./apdata__define.html", "apdata__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "apdata__define.pro", "    Aram Panasenco (panasencoaram@gmail.com)   ", "", " This class is a basic data container meant to be used instead of bothering  with pointers or the clunky IDLitData class   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./apdata__define.html#apData::init", "apData::init", 'routine in <a href="./apdata__define.html">apdata__define.pro</a>', "apdata__define.pro", "", "apData::init", "    Initializes an apData object .   ", "data      The data to store in the object   ", "          -1", "    Boolean success value (1/0)  ");
  
  libdata[libdataItem++] = new Array("./apdata__define.html#apData::hasData", "apData::hasData", 'routine in <a href="./apdata__define.html">apdata__define.pro</a>', "apdata__define.pro", "", "apData::hasData", "    Checks if the data object has data  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./apdata__define.html#apData::getData", "apData::getData", 'routine in <a href="./apdata__define.html">apdata__define.pro</a>', "apdata__define.pro", "", "apData::getData", "    Returns the data stored in the data object.   ", "SUCCESS", "          -1", "    Data stored in the object  ");
  
  libdata[libdataItem++] = new Array("./apdata__define.html#apData::setData", "apData::setData", 'routine in <a href="./apdata__define.html">apdata__define.pro</a>', "apdata__define.pro", "", "apData::setData", "    Sets the data to be stored in the data object.   ", "SUCCESSdata      The data to store in the object  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("./apdata__define.html#apData::duplicate", "apData::duplicate", 'routine in <a href="./apdata__define.html">apdata__define.pro</a>', "apdata__define.pro", "", "apData::duplicate", "    Duplicates the object with identical data, but a different object     reference.  ", "SUCCESS", "          -1", "");
  
  libdata[libdataItem++] = new Array("./apdata__define.html#apData::destroyData", "apData::destroyData", 'routine in <a href="./apdata__define.html">apdata__define.pro</a>', "apdata__define.pro", "", "apData::destroyData", "    Destroys the data stored in the data object.  ", "SUCCESS", "          -1", "");
  
  libdata[libdataItem++] = new Array("./apdata__define.html#apData::cleanup", "apData::cleanup", 'routine in <a href="./apdata__define.html">apdata__define.pro</a>', "apdata__define.pro", "", "apData::cleanup", "    Free the data pointer  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./apdictionary__define.html", "apdictionary__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "apdictionary__define.pro", "    Aram Panasenco (panasencoaram@gmail.com)   ", "", " This class is a wrapper around an IDL Structure that allows for very quick  and easy field value setting. You can add all types of values to the  dictionary that an IDL structure can hold.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./apdictionary__define.html#apDictionary::init", "apDictionary::init", 'routine in <a href="./apdictionary__define.html">apdictionary__define.pro</a>', "apdictionary__define.pro", "", "apDictionary::init", " Initializes an apDictionary object, with or without initial key-value pairs.   ", "_EXTRA      Keywords of the format KEY=VALUE. These define the initial class       structure.   ", "          -1", "    Initializing an apDictionary object:   <span class= code-prompt >IDL&gt;</span> mydict = obj_new('apDictionary', strkey='hi', intkey=-3)      Boolean success value (1/0)   ");
  
  libdata[libdataItem++] = new Array("./apdictionary__define.html#apDictionary::add", "apDictionary::add", 'routine in <a href="./apdictionary__define.html">apdictionary__define.pro</a>', "apdictionary__define.pro", "", "apDictionary::add", "  Adds one or more key-value pairs to the dictionary, passed in as keywords.   SUCCESS is the only reserved key.   ", "_extra      Keywords of the format KEY=VALUE. The key-value pairs will be added to       the dictionary. If some of the keys are already defined, they will be       overwritten.  SUCCESS      Optional variable to store the success boolean flag.   ", "          -1", "    Using the add method:   <span class= code-prompt >IDL&gt;</span> mydict -&gt; add, arrkey=[1,7,3], success=successBool   <span class= code-prompt >IDL&gt;</span> print, successBool <span class= code-output >     1</span>  ");
  
  libdata[libdataItem++] = new Array("./apdictionary__define.html#apDictionary::_remove", "apDictionary::_remove", 'routine in <a href="./apdictionary__define.html">apdictionary__define.pro</a>', "apdictionary__define.pro", "", "apDictionary::_remove", "  Removes (multiple) values from the container. Not user-friendly, meant   to be called from within the class only.   ", "SUCCESS      Optional variable to store the success boolean flag.   indices      An array of indices of the dictionary key-value pairs to be removed.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("./apdictionary__define.html#apDictionary::set", "apDictionary::set", 'routine in <a href="./apdictionary__define.html">apdictionary__define.pro</a>', "apdictionary__define.pro", "", "apDictionary::set", "  Sets (multiple) values based on their keys.   ", "_extra      Keywords of the format KEY=VALUE. The keys have to already exist in the       dictionary (not case-sensitive).  SUCCESS      Optional variable to store the success boolean flag.   ", "          -1", "    Using the set method:   <span class= code-prompt >IDL&gt;</span> mydict -&gt; set, strkey='A quick brown fox', success=successBool   <span class= code-prompt >IDL&gt;</span> print, successBool <span class= code-output >     1</span>  ");
  
  libdata[libdataItem++] = new Array("./apdictionary__define.html#apDictionary::get", "apDictionary::get", 'routine in <a href="./apdictionary__define.html">apdictionary__define.pro</a>', "apdictionary__define.pro", "", "apDictionary::get", " Retrieves a value based on a key.   ", "_extra      Keyword of the format /KEY. The key has to correspond to an existing       value in the dictionary (not case-sensitive).  SUCCESS      Optional variable to store the success boolean flag.   ", "          -1", "    Using the get method:   <span class= code-prompt >IDL&gt;</span> strval = mydict -&gt; get(/strkey, success=successBool)   <span class= code-prompt >IDL&gt;</span> print, strval <span class= code-output >  A quick brown fox</span>   <span class= code-prompt >IDL&gt;</span> print, successBool <span class= code-output >     1</span>      The value.   ");
  
  libdata[libdataItem++] = new Array("./apdictionary__define.html#apDictionary::duplicate", "apDictionary::duplicate", 'routine in <a href="./apdictionary__define.html">apdictionary__define.pro</a>', "apdictionary__define.pro", "", "apDictionary::duplicate", "    Creates a duplicate of the dictionary   ", "SUCCESS      Optional variable to store the success boolean flag.   ", "          -1", "    Using the duplicate method:   <span class= code-prompt >IDL&gt;</span> dupdict = mydict -&gt; duplicate(success=successBool)   <span class= code-prompt >IDL&gt;</span> print, dupdict -&gt; get(/intkey) <span class= code-output >            -3</span>   <span class= code-prompt >IDL&gt;</span> print, successBool <span class= code-output >     1</span>      A new apDictionary object identical to this one.   ");
  
  

libdata[libdataItem++] = new Array("./apstack__define.html", "apstack__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "apstack__define.pro", "    Aram Panasenco (panasencoaram@gmail.com)   ", "", " This class is an object-oriented wrapper around a basic stack.  The undelying structure is an array.  Values are added to the beginning and popped from the beginning.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./apstack__define.html#apStack::init", "apStack::init", 'routine in <a href="./apstack__define.html">apstack__define.pro</a>', "apstack__define.pro", "", "apStack::init", "    Initializes an apStack object.   ", "", "          -1", "    Boolean success value (1/0)  ");
  
  libdata[libdataItem++] = new Array("./apstack__define.html#apStack::push", "apStack::push", 'routine in <a href="./apstack__define.html">apstack__define.pro</a>', "apstack__define.pro", "", "apStack::push", "    Pushes a value to the beginning of the stack   ", "TO_END      Set this keyword to push the value onto the end of the stack (pushing       to the beginning is the default behavior).   var      The value being pushed onto the stack  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("./apstack__define.html#apStack::read", "apStack::read", 'routine in <a href="./apstack__define.html">apstack__define.pro</a>', "apstack__define.pro", "", "apStack::read", "", "ALLindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("./apstack__define.html#apStack::write", "apStack::write", 'routine in <a href="./apstack__define.html">apstack__define.pro</a>', "apstack__define.pro", "", "apStack::write", "", "valueindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("./apstack__define.html#apStack::pop", "apStack::pop", 'routine in <a href="./apstack__define.html">apstack__define.pro</a>', "apstack__define.pro", "", "apStack::pop", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./apstack__define.html#apStack::count", "apStack::count", 'routine in <a href="./apstack__define.html">apstack__define.pro</a>', "apstack__define.pro", "", "apStack::count", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./apstack__define.html#apStack::clear", "apStack::clear", 'routine in <a href="./apstack__define.html">apstack__define.pro</a>', "apstack__define.pro", "", "apStack::clear", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./apstack__define.html#apStack::cleanup", "apStack::cleanup", 'routine in <a href="./apstack__define.html">apstack__define.pro</a>', "apstack__define.pro", "", "apStack::cleanup", "", "", "          -1", "");
  
  

